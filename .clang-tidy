# Here is an explanation for why some of the checks are disabled:
#
# -modernize-use-trailing-return-type:
#   Most of the times, trailing return types provide no benefit. The additional "auto" and "->" are just noise.
#
# -modernize-use-nodiscard:
#   The leading [[nodiscard]] attribute adds noise to the code when reading it and may not provide considerable benefits.

# Warnings are easily be overlooked when they are not treated as errors.
WarningsAsErrors: "*"

Checks: >
  -*,
  bugprone-*,
  performance-*,
  clang-analyzer-*,
  cppcoreguidelines-*,
  modernize-*,
  -modernize-use-trailing-return-type,
  -modernize-use-nodiscard,
  readability-braces-around-statements,
  readability-function-size,
  readability-identifier-naming,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  readability-magic-numbers
  readability-misleading-indentation,
  readability-non-const-parameter,
  readability-redundant-control-flow,
  readability-redundant-preprocessor,
  readability-simplify-boolean-expr,

CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,           value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,        value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
  - { key: readability-identifier-naming.ClassMethodCase,        value: CamelCase }
  - { key: readability-identifier-naming.PrivateMethodSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMethodSuffix,  value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
  - { key: readability-function-cognitive-complexity.IgnoreMacros,  value: 1   }
